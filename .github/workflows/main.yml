# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  run-offsets-finder-project:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    - name: Install relevant packets (gnat and texinfo)
      run: sudo apt-get install gnat texinfo gdb gprbuild

    - name: Locate GDB version
      run: which gdb

    - name: Check GDB version
      run: gdb --version

    - name: Output GDB configuration
      run: gdb --configuration

    - name: Prepare some GDB command tests
      run: echo -e "maintenance set internal-error quit yes\nhelp python\npython\nimport sys\nprint(\"Foo\")\nsys.exit(0)\nend\nq 25" > python_test.gdb

    - name: Check GDB supports python (exit code 25 means something went wrong in the python commands) otherwise exit code should be the 0 force un sys.exit(0)
      run: gdb --command=python_test.gdb --batch

    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2

    - name: Build the test project (gprbuild finds automagically the .gpr file, -p to force missing dirs creation)
      run: pwd && ls -al && gprbuild -p -vm
      working-directory: ./offsets_finder

    - name: append GDB quit on error
      run: echo "maintenance set internal-error quit yes\n$(cat find_offsets.gdb)" > find_offsets.gdb && cat find_offsets.gdb

    # Runs a set of commands using the runners shell
    - name: Start a gdb session
      run: gdb --se=./exe/main --command=find_offsets.gdb --batch
      working-directory: ./offsets_finder

  run-test-project:
    runs-on: ubuntu-latest
    steps:
      - name: Install relevant packets (gnat and texinfo)
        run: sudo apt-get install gnat texinfo gdb gprbuild

      - name: Locate GDB version
        run: which gdb

      - name: Check GDB version
        run: gdb --version

      - name: Output GDB configuration
        run: gdb --configuration

      - name: Prepare some GDB command tests
        run: echo -e "maintenance set internal-error quit yes\nhelp python\npython\nimport sys\nprint(\"Foo\")\nsys.exit(0)\nend\nq 25" > python_test.gdb

      - name: Check GDB supports python (exit code 25 means something went wrong in the python commands) otherwise exit code should be the 0 force un sys.exit(0)
        run: gdb --command=python_test.gdb --batch

      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: build the test project (gprbuild finds automagically the .gpr file, -p to force missing dirs creation)
        run: pwd && ls -al && gprbuild -p -vm
        working-directory: ./cpp_test_project

      - name: Prepend GDB quit on error (and output file for check)
        run: echo -e "maintenance set internal-error quit yes\n$(cat .gdbinit)" > .gdbinit && cat .gdbinit

      # Runs a set of commands using the runners shell
      - name: Start a gdb session
        run: gdb --se=./exe/main --command=.gdbinit --batch
        working-directory: ./cpp_test_project
