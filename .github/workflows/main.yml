name: CI

on:
  push:
    branches:
      - master
      - 'release/v*'
      - feature/**

  pull_request:
    branches: [ master, release]

jobs:

  multiplatform-build-and-execute-tests:
    # The type of runner that the job will run on
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - windows-latest

    # env:
    #   TEST_DIR_PATH: ./tests/offsets_finder
    #   PYTHON_TEST: ./tests/Test_GDB_python.gdb
    #   GDB_TEST_SCRIPT: find_offsets.gdb
    #   EXE_FILE: ./exe/main.exe
    #   GNAT_BIN_PATH: C:\GNAT\bin

    steps:
      # - name: Chocolatey configuration
      #   run: choco config list

      # - name: Store Chocolatey cache dir
      #   run: echo ::set-env name=CHOCOLATEY_CACHE_PATH::$(choco config get cacheLocation)

      # - name: Get chocolatey cache dir
      #   id: choco-cache-dir-path
      #   run: echo "::set-output name=dir::$(choco config get cacheLocation)"

      # - name: Cache the chocolatey download dir
      #   uses: actions/cache@v1
      #   id: choco-cache
      #   with:
      #     path: ${{ steps.choco-cache-dir-path.outputs.dir }}
      #     key: ${{ matrix.os }}-chocolatey-download-cache
      #     restore-keys: |
      #       ${{ matrix.os }}-chocolatey-download-cache

      - name: Install relevant packets gnat-gpl which will hopefully provide gprbuild, gnat and gdb
        run: choco install gnat-gpl # -v -d
        if: matrix.os == 'windows-latest'

      - name: Add GNAT to PATH, chocolatey cannot do it by itself ?
        run: echo "::add-path::C:\GNAT\bin"
        if: matrix.os == 'windows-latest'

      - name: Install relevant packets gnat, texinfo, gdb, gprbuild
        run: sudo apt-get install gnat texinfo gdb gprbuild
        if: matrix.os == 'ubuntu-latest'


      - name: GDB location, version and configuration
        run: gdb --version && gdb --configuration

      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: Check GDB supports python
        run: gdb --command=./tests/Test_GDB_python.gdb --batch

      - name: Build offsets_finder (gprbuild finds automagically the .gpr file, -p to force missing dirs creation)
        run: gprbuild -p -vm
        working-directory: ./tests/offsets_finder

      # Runs a set of commands using the runners shell
      - name: Run offsets_finder GDB session
        run: gdb --se=./exe/main --command=find_offsets.gdb --batch
        working-directory: ./tests/offsets_finder
        if: matrix.os == 'ubuntu-latest'

      - name: Run offsets_finder GDB session
        run: gdb --se=./exe/main.exe --command=find_offsets.gdb --batch
        working-directory: ./tests/offsets_finder
        if: matrix.os == 'windows-latest'


      - name: Build cpp_test_project (gprbuild finds automagically the .gpr file, -p to force missing dirs creation)
        run: gprbuild -p -vm
        working-directory: ./tests/cpp_test_project


      - name: PERFORM GDB [TEST THE TEST SUITE]
        run: gdb --se=./exe/main.exe --command=Test_Test_Suite.gdb --batch
        working-directory: ./tests/cpp_test_project
        if: matrix.os == 'windows-latest'


      - name: PERFORM GDB [TEST THE TEST SUITE]
        run: gdb --se=./exe/main --command=Test_Test_Suite.gdb --batch
        working-directory: ./tests/cpp_test_project
        if: matrix.os == 'ubuntu-latest'



      - name: PERFORM GDB [TEST SUITE]
        run: gdb --se=./exe/main.exe --command=Test_Suite.gdb --batch
        working-directory: ./tests/cpp_test_project
        if: matrix.os == 'windows-latest'


      - name: PERFORM GDB [TEST SUITE]
        run: gdb --se=./exe/main --command=Test_Suite.gdb --batch
        working-directory: ./tests/cpp_test_project
        if: matrix.os == 'ubuntu-latest'
