# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [ master, release, feature]
  pull_request:
    branches: [ master, release]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:

  win-build-and-execute-offsets-finder:
    # The type of runner that the job will run on
    runs-on: windows-latest
    env:
      TEST_DIR: ./tests/offsets_finder
      PYTHON_TEST: ./tests/Test_GDB_python.gdb
      GDB_TEST_SCRIPT: find_offsets.gdb
      EXE_FILE: ./exe/main.exe

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    - name: Check OS version
      run: wmic os get Name, BuildNumber, BuildType, Version, OSArchitecture

    - name: Install relevant packets gnat, texinfo, gdb, gprbuild
      run: choco install gnat texinfo gdb gprbuild gnat-gpl

    - name: GNAT location and version
      run: which gnat && gnat --version

    - name: GDB location, version and configuration
      run: which gdb && gdb --version && gdb --configuration

    - name: Check GDB supports python
      run: gdb --command=$PYTHON_TEST --batch

    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2

    - name: Build the test project (gprbuild finds automagically the .gpr file, -p to force missing dirs creation)
      run: pwd && ls -al && gprbuild -p -vm
      working-directory: $TEST_DIR

    # Runs a set of commands using the runners shell
    - name: Run GDB session
      run: gdb --se=$EXE_FILE --command=$GDB_TEST_SCRIPT --batch
      working-directory: $TEST_DIR

  # This workflow contains a single job called "build"
  build-and-execute-offsets-finder:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    - name: Install relevant packets gnat, texinfo, gdb, gprbuild
      run: sudo apt-get install gnat texinfo gdb gprbuild

    - name: Locate GDB version
      run: which gdb

    - name: Check GDB version
      run: gdb --version

    - name: Output GDB configuration
      run: gdb --configuration

    - name: Check GDB supports Python
      run: echo -e "maintenance set internal-error quit yes\nhelp python\npython\nimport sys\nprint(\"Foo\")\nsys.exit(0)\nend\nq 25" > python_test.gdb

    - name: Check GDB supports python (exit code 25 means something went wrong in the python commands) otherwise exit code should be the 0 force un sys.exit(0)
      run: gdb --command=python_test.gdb --batch

    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2

    - name: Build the test project (gprbuild finds automagically the .gpr file, -p to force missing dirs creation)
      run: pwd && ls -al && gprbuild -p -vm
      working-directory: ./tests/offsets_finder

    - name: append GDB quit on error
      run: echo "maintenance set internal-error quit yes $(cat find_offsets.gdb)" > find_offsets.gdb && cat find_offsets.gdb
      working-directory: ./tests/offsets_finder

    # Runs a set of commands using the runners shell
    - name: Start a gdb session
      run: gdb --se=./exe/main --command=find_offsets.gdb --batch
      working-directory: ./tests/offsets_finder

  build-and-execute-test-suite:
    runs-on: ubuntu-latest
    steps:
      - name: Install relevant packets gnat, texinfo, gdb, gprbuild
        run: sudo apt-get install gnat texinfo gdb gprbuild

      - name: Locate GDB version
        run: which gdb

      - name: Check GDB version
        run: gdb --version

      - name: Output GDB configuration
        run: gdb --configuration

      - name: Check GDB supports Python
        run: echo -e "maintenance set internal-error quit yes\nhelp python\npython\nimport sys\nprint(\"Foo\")\nsys.exit(0)\nend\nq 25" > python_test.gdb

      - name: Check GDB supports python (exit code 25 means something went wrong in the python commands) otherwise exit code should be the 0 force un sys.exit(0)
        run: gdb --command=python_test.gdb --batch

      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: build the test project (gprbuild finds automagically the .gpr file, -p to force missing dirs creation)
        run: pwd && ls -al && gprbuild -p -vm
        working-directory: ./tests/cpp_test_project

      - name: Prepend GDB quit on error (and output file for check)
        run: echo "maintenance set internal-error quit yes $(cat .gdbinit)" > .gdbinit && cat .gdbinit
        working-directory: ./tests/cpp_test_project

      - name: Prepare test test suite GDB script
        run: cat .gdbinit > test_test_suite.gdb && echo -e "source checker.py\npython test_the_test_suite()" >> test_test_suite.gdb && cat test_test_suite.gdb
        working-directory: ./tests/cpp_test_project

      - name: Prepare test suite GDB script
        run: cat .gdbinit >  test_suite.gdb && echo -e "source checker.py\npython test_suite()" >> test_suite.gdb && cat test_suite.gdb
        working-directory: ./tests/cpp_test_project

      # Runs a set of commands using the runners shell
      - name: PERFORM GDB [TEST THE TEST SUITE]
        run: gdb --se=./exe/main --command=test_test_suite.gdb --batch
        working-directory: ./tests/cpp_test_project

      - name: PERFORM GDB [TEST SUITE]
        run: gdb --se=./exe/main --command=test_suite.gdb --batch
        working-directory: ./tests/cpp_test_project
