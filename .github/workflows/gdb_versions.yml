name: CI-GDB-versions

on:
  push:
    branches:
      - master
      #- 'release/v*'
      - feature/ci-test-several*

  pull_request:
    branches: [ master, release]

jobs:

  test-gdb-release:
    name: ${{ matrix.gdb }}-${{ matrix.os }}
    env:
      FTP_URL: ftp://sourceware.org/pub/gdb/releases/
      FILE_EXT: .tar.gz
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: False # try all !
      matrix:
        os:
          - ubuntu-latest
          # - windows-latest
        gdb:
          - gdb-7.0.1a
          - gdb-7.0a
          - gdb-7.10.1
          - gdb-7.10
          - gdb-7.11.1
          - gdb-7.11
          - gdb-7.12.1
          - gdb-7.12
          - gdb-7.1a
          - gdb-7.2a
          - gdb-7.3.1
          - gdb-7.3a
          - gdb-7.4.1
          - gdb-7.4
          - gdb-7.5.1
          - gdb-7.5
          - gdb-7.6.1
          - gdb-7.6.2
          - gdb-7.6
          - gdb-7.7.1
          - gdb-7.7
          - gdb-7.8.1
          - gdb-7.8.2
          - gdb-7.8
          - gdb-7.9.1
          - gdb-7.9
          - gdb-8.0.1
          - gdb-8.0
          - gdb-8.1.1
          - gdb-8.1
          - gdb-8.2.1
          - gdb-8.2
          - gdb-8.3.1
          - gdb-8.3
          - gdb-9.1
    steps:
      - name: list pythons
        run: ls /usr/bin/ | grep python

      - name: list pythons
        run: ls /usr/include -aRl | grep python

      - name: Install relevant packets gnat, texinfo, gprbuild (hoping that gnat compiler might change anything to failrues observed until now)
        run: sudo apt-get install gnat texinfo
        if: matrix.os == 'ubuntu-latest'

      - uses: actions/cache@v1
        id: cache-gdb-src
        with:
          path: ./gdb-downloads
          key: gdb-downloads-${{matrix.gdb}}${{env.FILE_EXT}}
          restore-keys: |
            gdb-downloads-${{matrix.gdb}}${{env.FILE_EXT}}

      - name: Create downloads dir
        run: mkdir -p gdb-downloads

      - name: Create directory for ${{matrix.gdb}}
        run: mkdir ${{matrix.gdb}}

      - name: Download ${{env.FTP_URL}}${{matrix.gdb}}${{env.FILE_EXT}}
        run: wget ${{env.FTP_URL}}${{matrix.gdb}}${{env.FILE_EXT}}
        working-directory: gdb-downloads
        if: steps.cache-gdb-src.outputs.cache-hit != 'true'

      - name: Decompress
        run: tar -xvzf ./gdb-downloads/${{matrix.gdb}}${{env.FILE_EXT}} && ls -al

      - name: get the effective tar root dir
        id: get-tar-root-dir
        run: echo "::set-output name=dir::$(tar -tzf ./gdb-downloads/${{matrix.gdb}}${{env.FILE_EXT}} | head -1 | cut -f1 -d"/")"

      - name: Set working directry for configure and make # = top dir of the tar (gdb-<version tag in tar>)
        run: echo "::set-env name=WORKING_DIR_PATH=$(echo ./${{ steps.get-tar-root-dir.outputs.dir }})"

      - name: Set command path for configure and make
        run: echo "::set-env name=CONFIG_MAKE_DIR_PATH=." # = top dir of the tar (gdb-<version tag in tar>) (contains configure / make)

      - name: Prepare a build directory for GDB 9.1
        run: echo "::set-env name=WORKING_DIR_PATH=$(echo ./${{ env.WORKING_DIR_PATH }}/build)"
        if: matrix.gdb == 'gdb-9.1'

      - name: Create build directory for GDB 9.1
        run: mkdir -p ${{env.WORKING_DIR_PATH}}
        if: matrix.gdb == 'gdb-9.1'

      - name: Override command path for configure and make
        run: echo "::set-env name=CONFIG_MAKE_DIR_PATH=.." # we work in ./tar root dir/build, so configure is in ../
        if: matrix.gdb == 'gdb-9.1'

      - name: Configure
        run:  pwd && ${{ env.CONFIG_MAKE_DIR_PATH }}/configure --host=x86_64-pc-linux-gnu --target=x86_64-pc-linux-gnu
        working-directory: ./${{ env.WORKING_DIR_PATH }}/

      - name: Make
        run: sudo ${{ env.CONFIG_MAKE_DIR_PATH }}/make
        working-directory: ./${{ env.WORKING_DIR_PATH }}/

      - name: Install
        run: sudo ${{ env.CONFIG_MAKE_DIR_PATH }}/make install
        working-directory: ./${{ env.WORKING_DIR_PATH }}/ #

      - name: Check GDB version
        run: which gdb && gdb --version


      # - uses: actions/checkout@v2


      # - name: Check GDB supports python
      #   run: gdb --command=./tests/Test_GDB_python.gdb --batch

      # - name: Build offsets_finder (gprbuild finds automagically the .gpr file, -p to force missing dirs creation)
      #   run: gprbuild -p -vm
      #   working-directory: ./tests/offsets_finder

      # # Runs a set of commands using the runners shell
      # - name: Run offsets_finder GDB session
      #   run: gdb --se=./exe/main --command=find_offsets.gdb --batch
      #   working-directory: ./tests/offsets_finder
      #   if: matrix.os == 'ubuntu-latest'

      # - name: Run offsets_finder GDB session
      #   run: gdb --se=./exe/main.exe --command=find_offsets.gdb --batch
      #   working-directory: ./tests/offsets_finder
      #   if: matrix.os == 'windows-latest'


      # - name: Build cpp_test_project (gprbuild finds automagically the .gpr file, -p to force missing dirs creation)
      #   run: gprbuild -p -vm
      #   working-directory: ./tests/cpp_test_project


      # - name: PERFORM GDB [TEST THE TEST SUITE]
      #   run: gdb --se=./exe/main.exe --command=Test_Test_Suite.gdb --batch
      #   working-directory: ./tests/cpp_test_project
      #   if: matrix.os == 'windows-latest'


      # - name: PERFORM GDB [TEST THE TEST SUITE]
      #   run: gdb --se=./exe/main --command=Test_Test_Suite.gdb --batch
      #   working-directory: ./tests/cpp_test_project
      #   if: matrix.os == 'ubuntu-latest'



      # - name: PERFORM GDB [TEST SUITE]
      #   run: gdb --se=./exe/main.exe --command=Test_Suite.gdb --batch
      #   working-directory: ./tests/cpp_test_project
      #   if: matrix.os == 'windows-latest'


      # - name: PERFORM GDB [TEST SUITE]
      #   run: gdb --se=./exe/main --command=Test_Suite.gdb --batch
      #   working-directory: ./tests/cpp_test_project
      #   if: matrix.os == 'ubuntu-latest'

      # - name: Check python versions
      #   run: python --version && python2 --version && python3 --version && python2.7.17 --version && python3.5.9 --version && python3.6.9 && python3.6.10 --version && python3.7.6 --version && python3.8.2 --version



