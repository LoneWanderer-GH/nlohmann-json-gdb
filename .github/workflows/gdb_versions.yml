name: CI-GDB-versions

on:
  push:
    branches:
      #- master
      #- 'release/v*'
      - feature/ci-test-several*

  pull_request:
    branches: [ master, release]

jobs:

  test-gdb-release:
    name: ${{ matrix.gdb }}-${{ matrix.os }}
    env:
      FTP_URL: ftp://sourceware.org/pub/gdb/releases/
      FILE_EXT: .tar.gz
      PWD_PATH: .
      CONFIG_MAKE_DIR_PATH: .
      DOWNLOAD_PATH: gdb-downloads
      GDB_BUILD_PATH: build
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: False # try all !
      matrix:
        os:
          - ubuntu-latest
          # - windows-latest
        gdb:
          - gdb-7.0.1a
          # - gdb-7.0a
          # - gdb-7.10.1
          # - gdb-7.10
          # - gdb-7.11.1
          # - gdb-7.11
          # - gdb-7.12.1
          # - gdb-7.12
          # - gdb-7.1a
          # - gdb-7.2a
          # - gdb-7.3.1
          # - gdb-7.3a
          # - gdb-7.4.1
          # - gdb-7.4
          # - gdb-7.5.1
          # - gdb-7.5
          # - gdb-7.6.1
          # - gdb-7.6.2
          # - gdb-7.6
          # - gdb-7.7.1
          # - gdb-7.7
          # - gdb-7.8.1
          # - gdb-7.8.2
          # - gdb-7.8
          # - gdb-7.9.1
          # - gdb-7.9
          # - gdb-8.0.1
          # - gdb-8.0
          # - gdb-8.1.1
          # - gdb-8.1
          # - gdb-8.2.1
          # - gdb-8.2
          # - gdb-8.3.1
          # - gdb-8.3
          # - gdb-9.1
    steps:
      - name: list pythons
        run: ls /usr/bin/ | grep python

      - name: list pythons
        run: ls /usr/include -aRl | grep python

      - name: Install relevant packets gnat, texinfo, gprbuild (hoping that gnat compiler might change anything to failrues observed until now)
        run: sudo apt-get install gnat texinfo
        if: matrix.os == 'ubuntu-latest'

      - uses: actions/cache@v1
        id: cache-gdb-src
        with:
          path: ./${{ env.DOWNLOAD_PATH }}
          key: ${{ env.DOWNLOAD_PATH }}-${{matrix.gdb}}${{env.FILE_EXT}}
          restore-keys: |
            ${{ env.DOWNLOAD_PATH }}-${{matrix.gdb}}${{env.FILE_EXT}}

      - name: Create downloads dir
        run: pwd && ls -al && mkdir -p ${{ env.DOWNLOAD_PATH }}

      # - name: Create directory for ${{matrix.gdb}}
      #   run: mkdir -p ${{matrix.gdb}}

      - name: Download ${{env.FTP_URL}}${{matrix.gdb}}${{env.FILE_EXT}}
        run: wget ${{env.FTP_URL}}${{matrix.gdb}}${{env.FILE_EXT}}
        working-directory: ${{ env.DOWNLOAD_PATH }}
        if: steps.cache-gdb-src.outputs.cache-hit != 'true'

      - name: Decompress
        run: pwd && ls -al && tar -xzf ./${{ env.DOWNLOAD_PATH }}/${{matrix.gdb}}${{env.FILE_EXT}} && ls -al

      - name: test echo
        run: echo gdb-[0-9].*

      - name: get the effective tar root dir (the newly created dir at job root dir, it can be different from targz !)
        id: get-untar-root-dir
        #run: echo "::set-output name=dir::$(tar -tzf ./${{ env.DOWNLOAD_PATH }}/${{matrix.gdb}}${{env.FILE_EXT}} | head -1 | cut -f1 -d"/")"
        run: echo "::set-output name=dir::$(echo gdb-[0-9].*)"

      - name: The working-directory we would like is
        run: echo ${{ steps.get-untar-root-dir.dir }}

      - name: Configure
        run: pwd && ls -al && configure --host=x86_64-pc-linux-gnu --target=x86_64-pc-linux-gnu
        working-directory: ./${{ steps.get-untar-root-dir.dir }}
        if: matrix.gdb != 'gdb-9.1'

      - name: Make
        run: pwd && ls -al && sudo make
        working-directory: ${{ steps.get-untar-root-dir.dir }}
        if: matrix.gdb != 'gdb-9.1'

      - name: Install
        run: pwd && ls -al && sudo make install
        working-directory: ${{ steps.get-untar-root-dir.dir }}
        if: matrix.gdb != 'gdb-9.1'


      - name: Prepare a separate build directory for GDB 9.1
        run: pwd && ls -al && mkdir -p ${{ env.GDB_BUILD_PATH }}
        if: matrix.gdb == 'gdb-9.1'

      - name: Configure
        run: pwd && ls -al &&  ../${{ steps.get-untar-root-dir.dir }}/configure --host=x86_64-pc-linux-gnu --target=x86_64-pc-linux-gnu
        working-directory: ${{ env.GDB_BUILD_PATH }}
        if: matrix.gdb == 'gdb-9.1'

      - name: Make
        run: pwd && ls -al && sudo ../${{ steps.get-untar-root-dir.dir }}/make
        working-directory: ${{ env.GDB_BUILD_PATH }}
        if: matrix.gdb == 'gdb-9.1'

      - name: Install
        run: pwd && ls -al && sudo ../${{ steps.get-untar-root-dir.dir }}/make install
        working-directory: ${{ env.GDB_BUILD_PATH }}
        if: matrix.gdb == 'gdb-9.1'





      # - name: Set working directry for configure and make # = top dir of the tar (gdb-<version tag in tar>)
      #   id: pwd
      #   run: echo "::set-output name=path=$(echo ./${{ steps.get-untar-root-dir.outputs.dir }})"
      #   if: matrix.gdb == 'gdb-9.1'

      # - name: Set command path for configure and make
      #   id: config_make_dir
      #   run: echo "::set-outpu name=path=." # = top dir of the tar (gdb-<version tag in tar>) (contains configure / make)

      # - name: Prepare a build directory for GDB 9.1
      #   run: echo "::set-env name=PWD_PATH=$(echo ./${{env.PWD_PATH}}/build)"
      #   if: matrix.gdb == 'gdb-9.1'

      # - name: Create build directory for GDB 9.1
      #   run: mkdir -p ${{env.PWD_PATH}}
      #   if: matrix.gdb == 'gdb-9.1'

      # - name: Override command path for configure and make
      #   run: echo "::set-env name=CONFIG_MAKE_DIR_PATH=.." # we work in ./tar root dir/build, so configure is in ../
      #   if: matrix.gdb == 'gdb-9.1'

      # # - name: Echo all env var
      # #   run:

      # - name: Configure
      #   run:  pwd && ${{env.CONFIG_MAKE_DIR_PATH}}/configure --host=x86_64-pc-linux-gnu --target=x86_64-pc-linux-gnu
      #   working-directory: ./${{env.PWD_PATH}}/

      # - name: Make
      #   run: sudo ${{env.CONFIG_MAKE_DIR_PATH}}/make
      #   working-directory: ./${{env.PWD_PATH}}/

      # - name: Install
      #   run: sudo ${{env.CONFIG_MAKE_DIR_PATH}}/make install
      #   working-directory: ./${{env.PWD_PATH}}/ #

      - name: Check GDB version
        run: which gdb && gdb --version


      # - uses: actions/checkout@v2


      # - name: Check GDB supports python
      #   run: gdb --command=./tests/Test_GDB_python.gdb --batch

      # - name: Build offsets_finder (gprbuild finds automagically the .gpr file, -p to force missing dirs creation)
      #   run: gprbuild -p -vm
      #   working-directory: ./tests/offsets_finder

      # # Runs a set of commands using the runners shell
      # - name: Run offsets_finder GDB session
      #   run: gdb --se=./exe/main --command=find_offsets.gdb --batch
      #   working-directory: ./tests/offsets_finder
      #   if: matrix.os == 'ubuntu-latest'

      # - name: Run offsets_finder GDB session
      #   run: gdb --se=./exe/main.exe --command=find_offsets.gdb --batch
      #   working-directory: ./tests/offsets_finder
      #   if: matrix.os == 'windows-latest'


      # - name: Build cpp_test_project (gprbuild finds automagically the .gpr file, -p to force missing dirs creation)
      #   run: gprbuild -p -vm
      #   working-directory: ./tests/cpp_test_project


      # - name: PERFORM GDB [TEST THE TEST SUITE]
      #   run: gdb --se=./exe/main.exe --command=Test_Test_Suite.gdb --batch
      #   working-directory: ./tests/cpp_test_project
      #   if: matrix.os == 'windows-latest'


      # - name: PERFORM GDB [TEST THE TEST SUITE]
      #   run: gdb --se=./exe/main --command=Test_Test_Suite.gdb --batch
      #   working-directory: ./tests/cpp_test_project
      #   if: matrix.os == 'ubuntu-latest'



      # - name: PERFORM GDB [TEST SUITE]
      #   run: gdb --se=./exe/main.exe --command=Test_Suite.gdb --batch
      #   working-directory: ./tests/cpp_test_project
      #   if: matrix.os == 'windows-latest'


      # - name: PERFORM GDB [TEST SUITE]
      #   run: gdb --se=./exe/main --command=Test_Suite.gdb --batch
      #   working-directory: ./tests/cpp_test_project
      #   if: matrix.os == 'ubuntu-latest'

      # - name: Check python versions
      #   run: python --version && python2 --version && python3 --version && python2.7.17 --version && python3.5.9 --version && python3.6.9 && python3.6.10 --version && python3.7.6 --version && python3.8.2 --version



